version: '3.8'
services:
    configserver:
        container_name: configserver
        hostname: configserver
        build:
            context: ./ConfigServer
            #dockerfile: Dockerfile-ConfigServer
        image: schi11er/tt_configserver:latest
        restart: unless-stopped
        ports:
            - 8888:8888
        networks:
            - terraintwin_microservices
        volumes:
            - ./volumes/configs:/var/lib/centralProperties
        # healthcheck:
        #     test: ["CMD", "curl", "http://localhost:8888/login"]
        #     # ["CMD", "curl", "http://localhost:8888/actuator/health"]
        #         # "curl --fail localhost:8888/actuator/health | grep UP || exit 1"
        #     interval: 20s
        #     timeout: 10s
        #     retries: 5
        #     start_period: 5s

    eurekaserver:
        container_name: eurekaserver
        build:
            context: ./EurekaServer
        image: schi11er/tt_eurekaserver:latest
        restart: unless-stopped
        ports:
            - 9091:9091
        networks:
            - terraintwin_microservices
        depends_on: 
            - configserver

    minio-upload-service:
        container_name: minio-upload-service
        build:
            context: ./MinIOUploadService
        image: schi11er/tt_minio-upload-service:latest
        restart: unless-stopped
        ports:
            - 7204:7204
        depends_on: 
            - configserver
            - eurekaserver
            # configserver: 
            #     condition: service_healthy
            # eurekaserver:
            #     condition: service_healthy
        networks:
            - terraintwin_microservices
        # healthcheck:
        #     test: ["CMD", "curl", "http://localhost:7204/actuator/health"]
        #     interval: 5s
        #     timeout: 5s
        #     retries: 3
        #     start_period: 1s
        # environment:
        #     WAIT_HOSTS: configserver:8888
        environment:
            - domain.url=${DOMAIN_URL}
            - minio.url=${MINIO_URL}
            - minio.port=${MINIO_PORT}
            - minio.access_key=${MINIO_ACCESS_KEY}
            - minio.secret_key=${MINIO_SECRET_KEY}

            
    graphdb-import-service:
        container_name: graphdb-import-service
        build:
            context: ./GraphDBImportService
        image: schi11er/tt_graphdb-import-service:latest
        restart: unless-stopped
        ports:
            - 7201:7201
        networks:
            - terraintwin_microservices
        depends_on:
            - configserver
            - eurekaserver
        environment:
            - domain.url=${DOMAIN_URL}
            - minio.url=${MINIO_URL}
            - minio.port=${MINIO_PORT}
            - minio.access_key=${MINIO_ACCESS_KEY}
            - minio.secret_key=${MINIO_SECRET_KEY}
            - graphdb.url=${GRAPHDB_URL}
            - graphdb.username=${GRAPHDB_USERNAME}
            - graphdb.password=${GRAPHDB_PASSWORD}

    postgres-import-service:
        container_name: postgres-import-service
        build:
            context: ./PostgresImportService
        image: schi11er/tt_postgres-import-service:latest
        restart: unless-stopped
        ports:
            - 7203:7203
        networks:
            - terraintwin_microservices
        depends_on:
            - configserver
            - eurekaserver
        environment:
            - domain.url=${DOMAIN_URL}
            - minio.url=${MINIO_URL}
            - minio.port=${MINIO_PORT}
            - minio.access_key=${MINIO_ACCESS_KEY}
            - minio.secret_key=${MINIO_SECRET_KEY}
            - postgres.url=${POSTGRES_URL}
            - postgres.database.name=${POSTGRES_DATABASE}
            - postgres.database.username=${POSTGRES_DATABASE_USERNAME}
            - postgres.database.password=${POSTGRES_DATABASE_PASSWORD}/

    csv2rdf-converter-service:
        container_name: csv2rdf-converter-service
        build:
            context: ./Csv2RdfConverterService
        image: schi11er/tt_csv2rdf-converter-service:latest
        restart: unless-stopped
        ports:
            - 7202:7202
        networks:
            - terraintwin_microservices
        depends_on:
            - configserver
            - eurekaserver
        environment:
            - domain.url=${DOMAIN_URL}
            
    gateway-service:
        container_name: gateway-service
        build:
            context: ./GatewayService
        image: schi11er/tt_gateway-service:latest
        restart: unless-stopped
        ports:
            - 8084:8084
        networks:
            - terraintwin_microservices
        depends_on:
            - configserver
            - eurekaserver
            # configserver: 
            #     condition: service_healthy
            # eurekaserver:
            #     condition: service_healthy
        # healthcheck:
        #     test: ["CMD", "curl", "http://localhost:8084/v3/api-docs"]
        #     interval: 5s
        #     timeout: 5s
        #     retries: 5
        #     start_period: 80s

networks:
    terraintwin_microservices:
        driver: bridge