version: '3.8'
services:
    configserver:
        container_name: configserver
        # hostname: ${DOMAIN_NAME}
            # configserver
        build:
            context: ./ConfigServer
        image: schi11er/tt_configserver:latest
        restart: unless-stopped
        ports:
            - 8888:8888
        networks:
            - terraintwin_microservices
        volumes:
            - ./volumes/configs:/var/lib/centralProperties
            - ./volumes/logs:/var/log
        healthcheck:
            test: wget --spider http://localhost:8888/actuator/health || exit 1
            interval: 30s
            timeout: 5s
            retries: 5
            start_period: 10s
        environment:
            - domain.url=${DOMAIN_URL}

    eurekaserver:
        container_name: eurekaserver
        # hostname: ${DOMAIN_NAME}
        build:
            context: ./EurekaServer
        image: schi11er/tt_eurekaserver:latest
        restart: unless-stopped
        ports:
            - 9091:9091
        networks:
            - terraintwin_microservices
        depends_on: 
            - configserver
        healthcheck:
            test: wget --spider http://localhost:9091/actuator/health || exit 1
            interval: 30s
            timeout: 5s
            retries: 5
            start_period: 10s
        environment:
            - domain.url=${DOMAIN_URL}
        volumes:
            - ./volumes/logs:/var/log

    minio-upload-service:
        profiles: 
            - terraintwin
        container_name: minio-upload-service
        # hostname: ${DOMAIN_NAME}
        build:
            context: ./MinIOUploadService
        image: schi11er/tt_minio-upload-service:latest
        restart: unless-stopped
        ports:
            - 7204:7204
        depends_on: 
            - configserver
            - eurekaserver
        networks:
            - terraintwin_microservices
        healthcheck:
            test: wget --spider http://localhost:7204/actuator/health || exit 1
            interval: 30s
            timeout: 5s
            retries: 5
            start_period: 10s
        environment:
            - domain.url=${DOMAIN_URL}
            - minio.url=${MINIO_URL}
            - minio.port=${MINIO_PORT}
            - minio.access_key=${MINIO_ACCESS_KEY}
            - minio.secret_key=${MINIO_SECRET_KEY}
        volumes:
            - ./volumes/logs:/var/log
        # deploy:
        #     mode: replicated
        #     replicas: 2

            
    file-input-handler:
        profiles: 
            - topoimport
            - terraintwin
            - import
        container_name: file-input-handler
        # hostname: ${DOMAIN_NAME}
        build:
            context: ./FileInputHandler
        image: schi11er/tt_file-input-handler:latest
        restart: unless-stopped
        ports:
            - 7201:7201
        networks:
            - terraintwin_microservices
        depends_on:
            - configserver
            - eurekaserver
            # - admin-server
        healthcheck:
            test: wget --spider http://localhost:7201/actuator/health || exit 1
            interval: 30s
            timeout: 5s
            retries: 5
            start_period: 20s
        environment:
            - domain.url=${DOMAIN_URL}
            - minio.url=${MINIO_URL}
            - minio.port=${MINIO_PORT}
            - minio.access_key=${MINIO_ACCESS_KEY}
            - minio.secret_key=${MINIO_SECRET_KEY}
            - graphdb.url=${GRAPHDB_URL}
            - graphdb.username=${GRAPHDB_USERNAME}
            - graphdb.password=${GRAPHDB_PASSWORD}
        volumes:
            - ./volumes/logs:/var/log
            - ./volumes/configs/repo-config.ttl:/var/config/repo-config.ttl

    geometry-handler:
        profiles: 
            - import
            - terraintwin
        container_name: geometry-handler
        # hostname: ${DOMAIN_NAME}
        build:
            context: ./GeometryHandler
        image: schi11er/tt_geometry-handler:latest
        restart: unless-stopped
        ports:
            - 7203:7203
        networks:
            - terraintwin_microservices
        depends_on:
            - configserver
            - eurekaserver
        healthcheck:
            test: wget --spider http://localhost:7203/actuator/health || exit 1
            interval: 30s
            timeout: 5s
            retries: 5
            start_period: 20s
        environment:
            - domain.url=${DOMAIN_URL}
            - minio.url=${MINIO_URL}
            - minio.port=${MINIO_PORT}
            - minio.access_key=${MINIO_ACCESS_KEY}
            - minio.secret_key=${MINIO_SECRET_KEY}
            - postgres.url=${POSTGRES_URL}
            - postgres.database.name=${POSTGRES_DATABASE}
            - postgres.database.username=${POSTGRES_USERNAME}
            - postgres.database.password=${POSTGRES_PASSWORD}
            # - project.epsg=${PROJECT_EPSG}
        volumes:
            - ./volumes/logs:/var/log
        # command: /bin/bash -c "psql -v ON_ERROR_STOP=1 -v dbname=example -v dbuser=example -e" < ./schema.sql

    csv2rdf-converter-service:
        profiles: 
            - terraintwin
        container_name: csv2rdf-converter-service
        # hostname: ${DOMAIN_NAME}
        build:
            context: ./Csv2RdfConverterService
        image: schi11er/tt_csv2rdf-converter-service:latest
        restart: unless-stopped
        ports:
            - 7202:7202
        networks:
            - terraintwin_microservices
        depends_on:
            - configserver
            - eurekaserver
        healthcheck:
            test: wget --spider http://localhost:7202/actuator/health || exit 1
            interval: 30s
            timeout: 5s
            retries: 5
            start_period: 10s
        environment:
            - domain.url=${DOMAIN_URL}
            - minio.url=${MINIO_URL}
            - minio.port=${MINIO_PORT}
            - minio.access_key=${MINIO_ACCESS_KEY}
            - minio.secret_key=${MINIO_SECRET_KEY}
        volumes:
            - ./volumes/logs:/var/log
            
    gateway-service:
        profiles: 
            - terraintwin
        container_name: gateway-service
        # hostname: ${DOMAIN_NAME}
        build:
            context: ./GatewayService
        image: schi11er/tt_gateway-service:latest
        restart: unless-stopped
        ports:
            - 8084:8084
        networks:
            - terraintwin_microservices
        depends_on:
            - configserver
            - eurekaserver
        healthcheck:
            test: wget --spider http://localhost:8084/actuator/health || exit 1
            interval: 30s
            timeout: 5s
            retries: 5
            start_period: 10s
        environment:
            - domain.url=${DOMAIN_URL}
        volumes:
            - ./volumes/logs:/var/log

    admin-server:
        profiles: 
            - terraintwin
        container_name: admin-server
        # hostname: ${DOMAIN_NAME}
        build:
            context: ./AdminServer
        image: schi11er/tt_admin-server:latest
        restart: unless-stopped
        ports:
            - 9092:9092
        depends_on: 
            - eurekaserver
        networks:
            - terraintwin_microservices
        environment:
            - domain.url=${DOMAIN_URL}
        volumes:
            - ./volumes/logs:/var/log
   
    dashboard-service:
        profiles: 
            - terraintwin
        container_name: dashboard-service
        # hostname: ${DOMAIN_NAME}
        build:
            context: ./DashboardService
        image: schi11er/tt_dashboard-service:latest
        restart: unless-stopped
        ports:
            - 7205:7205
        networks:
            - terraintwin_microservices
        depends_on:
            - configserver
            - eurekaserver
        healthcheck:
            test: wget --spider http://localhost:7205/actuator/health || exit 1
            interval: 30s
            timeout: 5s
            retries: 5
            start_period: 20s
        environment:
            - domain.url=${DOMAIN_URL}
            - postgres.url=${POSTGRES_URL}
            - postgres.database.name=${POSTGRES_DATABASE}
            - postgres.database.username=${POSTGRES_USERNAME}
            - postgres.database.password=${POSTGRES_PASSWORD}
        volumes:
            - ./volumes/logs:/var/log

    topology-service:
        profiles: 
            - topoimport
            - terraintwin
        container_name: topology-service
        # hostname: ${DOMAIN_NAME}
        build:
            context: ./TopologyService
        image: schi11er/tt_topology-service:latest
        restart: unless-stopped
        ports:
            - 7206:7206
        networks:
            - terraintwin_microservices
        depends_on:
            - configserver
            - eurekaserver
        healthcheck:
            test: wget --spider http://localhost:7206/actuator/health || exit 1
            interval: 30s
            timeout: 5s
            retries: 5
            start_period: 20s
        environment:
            - domain.url=${DOMAIN_URL}
            - postgres.url=${POSTGRES_URL}
            - postgres.database.name=${POSTGRES_DATABASE}
            - postgres.database.username=${POSTGRES_USERNAME}
            - postgres.database.password=${POSTGRES_PASSWORD}
        volumes:
            - ./volumes/logs:/var/log

    ifcterrain-service: 
        container_name: ifcterrain-service
        build:
            context: ./IFCTerrain
        image: schi11er/tt_ifcterrain-service:latest
        restart: unless-stopped
        ports:
            - 7209:7209
        depends_on:
            - configserver
            - eurekaserver
        healthcheck:
            test: wget --spider http://localhost:7209/actuator/health || exit 1
            interval: 30s
            timeout: 5s
            retries: 5
            start_period: 20s
        networks:
            - terraintwin_microservices
        environment:
            - domain.url=${DOMAIN_URL}
            - minio.url=${MINIO_URL}
            - minio.port=${MINIO_PORT}
            - minio.access_key=${MINIO_ACCESS_KEY}
            - minio.secret_key=${MINIO_SECRET_KEY}
        volumes:
            - ./volumes/files:/app/files
            - ./volumes/logs:/var/log
    
    scheduler-service: 
        container_name: scheduler-service
        build:
            context: ./SchedulerService
        image: schi11er/tt_scheduler-service:latest
        restart: unless-stopped
        ports:
            - 7210:7210
        depends_on:
            - configserver
            - eurekaserver
        healthcheck:
            test: wget --spider http://localhost:7210/actuator/health || exit 1
            interval: 30s
            timeout: 5s
            retries: 5
            start_period: 20s
        networks:
            - terraintwin_microservices
        environment:
            - domain.url=${DOMAIN_URL}
        volumes:
            - ./volumes/logs:/var/log

networks:
    terraintwin_microservices:
        driver: bridge

#     keycloak:
#         image: jboss/keycloak:13.0.1
#         container_name: keycloak_security
#         restart: on-failure
#         environment:
#             KEYCLOAK_USER: admin
#             KEYCLOAK_PASSWORD: admin
#             DB_VENDOR: postgres
#             DB_ADDR: postgres
#             DB_DATABASE: keycloak
#             DB_USER: keycloak
#             # DB_SCHEMA: public
#             DB_PASSWORD: password
#         ports:
#             - 9095:9095
#         volumes:
#             - ./volumes/keycloak-server:/tmp/keycloak/config
#         command:
# #             - "-b"
# #             - "0.0.0.0"
#             - "-Djboss.socket.binding.port-offset=1015"
#         networks:
#             - terraintwin_microservices
#         depends_on: 
#             - postgres

#     postgres:
#         image: postgres:13.2
#         volumes:
#             - ./volumes/postgres_data:/var/lib/postgresql/data
#         restart: always
#         environment:
#             POSTGRES_DB: keycloak
#             POSTGRES_USER: keycloak
#             POSTGRES_PASSWORD: password
#         networks:
#             - terraintwin_microservices

# volumes:
#     postgres_data:
#         name: keycloak_postgres_data
#         driver: local

#     graphdb-database:
#         image: ghcr.io/dd-bim/graphdb:9.4.1-free
#         restart: unless-stopped
#         ports:
#         - ${GRAPHDB_PORT:-7200}:7200
#         volumes:
#         - ./volumes/graphdb:/opt/graphdb/home:Z

#     postgres-database:
#         image: postgis/postgis:13-3.0-alpine
#         restart: unless-stopped
#         environment:
#         - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
#         - POSTGRES_USER=${POSTGRES_USERNAME}
#         - POSTGRES_DB=${POSTGRES_DATABASE}
#         - PGDATA=/var/lib/postgresql/data/pgdata
#         ports:
#         - ${POSTGRES_PORT:-5432}:5432
#         volumes:
#         - ./volumes/postgres:/var/lib/postgresql/data:Z

#     minio-storage:
#         image: minio/minio:RELEASE.2020-11-12T22-33-34Z
#         restart: unless-stopped
#         ports:
#         - ${MINIO_PORT:-9000}:9000
#         environment:
#         - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY}
#         - MINIO_SECRET_KEY=${MINIO_SECRET_KEY}
#         volumes:
#         - ./volumes/minio:/data:Z
#         command: ["server", "/data"]

#     pgadmin-interface:
#         image: dpage/pgadmin4:5.3
#         restart: unless-stopped
#         environment:
#         - PGADMIN_DEFAULT_EMAIL=${PGADMIN_USERMAIL}
#         - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_PASSWORD}
#         ports:
#         - ${PGADMIN_PORT:-5433}:80
#         volumes:
#         - ./volumes/pgadmin:/var/lib/pgadmin:Z
#         # - pgadmin:/var/lib/pgadmin

# # volumes:
# #     pgadmin:


